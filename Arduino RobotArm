/**   ArduinoIDE   **/



#include <Servo.h>

Servo servoBase;
Servo servoArm1;
Servo servoArm2;
Servo servoClaw;

bool clawOpen = false;
bool lastButtonState1 = HIGH;
bool lastButtonState2 = HIGH;

bool emergencyStop = false;
bool lastEmergencyButtonState = HIGH;

#define MAX_RECORD 200  // 録画フレーム数を減らしてメモリオーバーフローを防ぐ

byte recordBase[MAX_RECORD];
byte recordArm1[MAX_RECORD];
byte recordArm2[MAX_RECORD];
byte recordClaw[MAX_RECORD];
int recordIndex = 0;

bool isRecording = false;
bool lastRecordButtonState = HIGH;

bool isPlaying = false;
bool lastPlayButtonState = HIGH;
int playIndex = 0;

void setup() {
  servoBase.attach(11);
  servoArm1.attach(9);
  servoArm2.attach(10);
  servoClaw.attach(6);

  pinMode(2, INPUT_PULLUP);  // クロー開閉ボタン1
  pinMode(4, INPUT_PULLUP);  // クロー開閉ボタン2
  pinMode(5, INPUT_PULLUP);  // 緊急停止ボタン
  pinMode(3, INPUT_PULLUP);  // 録画ボタン
  pinMode(7, INPUT_PULLUP);  // 再生ボタン

  Serial.begin(9600);
}

void loop() {
  // 再生動作の処理
  if (isPlaying) {
    if (playIndex < recordIndex) {
      servoBase.write(recordBase[playIndex]);
      servoArm1.write(recordArm1[playIndex]);
      servoArm2.write(recordArm2[playIndex]);
      servoClaw.write(recordClaw[playIndex]);
      playIndex++;
      delay(20);
    } else {
      isPlaying = false;
      Serial.println("再生終了！");
    }
    return;
  }

  // 緊急停止処理
  bool currentEmergencyButtonState = digitalRead(5);
  if (currentEmergencyButtonState == LOW && lastEmergencyButtonState == HIGH) {
    emergencyStop = !emergencyStop;
    Serial.print("緊急停止状態: ");
    Serial.println(emergencyStop ? "ON" : "OFF");
    delay(70);
  }
  lastEmergencyButtonState = currentEmergencyButtonState;

  if (emergencyStop) return;

  // 録画ボタンの処理
  bool currentRecordButtonState = digitalRead(3);
  if (currentRecordButtonState == LOW && lastRecordButtonState == HIGH) {
    isRecording = !isRecording;
    if (isRecording) {
      recordIndex = 0;
      Serial.println("録画開始...");
    } else {
      Serial.print("録画終了。総フレーム数：");
      Serial.println(recordIndex);
    }
    delay(70);
  }
  lastRecordButtonState = currentRecordButtonState;

  // 再生ボタンの処理
  bool currentPlayButtonState = digitalRead(7);
  if (currentPlayButtonState == LOW && lastPlayButtonState == HIGH) {
    if (!isRecording && recordIndex > 0) {
      isPlaying = true;
      playIndex = 0;
      Serial.println("再生開始...");
    }
    delay(70);
  }
  lastPlayButtonState = currentPlayButtonState;

  // ジョイスティックの値を読み取る
  int joy1X = analogRead(A0); // 小腕
  int joy1Y = analogRead(A1); // ベース
  int joy2X = analogRead(A3); // 大腕

  int angleBase = map(joy1Y, 0, 1023, 0, 300);    // 0〜180度にマッピング。300度はサーボには不適切
  int angleArm2 = map(joy1X, 0, 1023, 150, 0);    // 適切な範囲に修正、0〜180度を保証
  int angleArm1 = map(joy2X, 0, 1023, 0, 180);

  servoBase.write(angleBase);
  servoArm1.write(angleArm1);
  servoArm2.write(angleArm2);

  // クローの開閉をボタンで制御
  bool currentButton1 = digitalRead(2);
  bool currentButton2 = digitalRead(4);
  if ((currentButton1 == LOW && lastButtonState1 == HIGH) ||
      (currentButton2 == LOW && lastButtonState2 == HIGH)) {
    clawOpen = !clawOpen;
    if (clawOpen) {
      servoClaw.write(0);
    } else {
      servoClaw.write(180);
    }
    delay(70);
  }
  lastButtonState1 = currentButton1;
  lastButtonState2 = currentButton2;

  // 現在の角度をフレームとして録画
  if (isRecording && recordIndex < MAX_RECORD) {
    recordBase[recordIndex] = angleBase;
    recordArm1[recordIndex] = angleArm1;
    recordArm2[recordIndex] = angleArm2;
    recordClaw[recordIndex] = clawOpen ? 30 : 90;
    recordIndex++;
  }

  delay(20);
}
